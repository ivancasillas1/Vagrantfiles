# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.define "master" do |master|
    master.vm.box = "generic/centos8"
    master.vm.hostname = "Master"
    master.vm.network :private_network, ip: "192.168.10.40"
    master.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--ioapic", "on"]
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--name", "Master"]
      v.customize ["modifyvm", :id, "--memory", 4096]
      v.customize ["modifyvm", :id, "--cpus", 2]
  end
  $COMMANDS = <<-'BLOCK'
  sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config;
  sudo yum update && sudo yum upgrade
  sudo systemctl restart sshd
  ssh-keygen
  ssh-copy-id usuario@192.168.10.41
  ssh-copy-id usuario@192.168.10.42
  sudo yum -y install git
  sudo yum -y install python3
  sudo yum -y install epel-release
  sudo yum install python3-pip
  python3 -m pip install --upgrade pip
  sudo yum install ansible-core
  echo "root:vagrant" | sudo chpasswd
  BLOCK
  master.vm.provision "shell", inline: $COMMANDS
  end

  config.vm.define "cliente1" do |cliente1|
    cliente1.vm.box = "generic/centos9s"
    cliente1.vm.hostname = "Cliente1"
    cliente1.vm.network :private_network, ip: "192.168.10.41"
    cliente1.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--ioapic", "on"]
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--name", "cliente1"]
      v.customize ["modifyvm", :id, "--memory", 4096]
      v.customize ["modifyvm", :id, "--cpus", 2]
    end
    $COMMANDS = <<-'BLOCK'
    sudo dnf update && sudo dnf upgrade -y
    sudo systemctl restart sshd
    echo "root:vagrant" | sudo chpasswd
    BLOCK
    cliente1.vm.provision "shell", inline: $COMMANDS
  end



  config.vm.define "cliente2" do |cliente2|
    cliente2.vm.box = "generic/debian12"
    cliente2.vm.hostname = "Cliente2"
    cliente2.vm.network :private_network, ip: "192.168.10.42"
    cliente2.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--ioapic", "on"]
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--name", "cliente2"]
      v.customize ["modifyvm", :id, "--memory", 4096]
      v.customize ["modifyvm", :id, "--cpus", 2]
    end
    $COMMANDS = <<-'BLOCK'
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get install ufw
    sudo systemctl restart sshd
    echo "root:vagrant" | sudo chpasswd
    BLOCK
    cliente2.vm.provision "shell", inline: $COMMANDS
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
